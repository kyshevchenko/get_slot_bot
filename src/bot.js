import puppeteer from 'puppeteer';
import { Telegraf } from 'telegraf';
import dotenv from 'dotenv';

import { getWorkDaysCount } from '../utils';

dotenv.config();

const bot = new Telegraf(process.env.BOT_TOKEN);
const ownerID = process.env.OWNER_ID;
const iceRincSite = process.env.ICE_RINC_SITE;

bot.telegram.sendMessage(ownerID, '–ë–æ—Ç –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç–∞—Ç—å.');

const date = new Date();
const startBotDate = date.toLocaleDateString();
const startBotTime = date.toLocaleTimeString();
const users = {};

const reqiredDay = '01.12.2024';
const reqiredTime = '16:00';

bot.start((ctx) => {
  const userId = ctx.message.from.id;
  const userName = `@${ctx.message.from.username}`;

  if (!users[userId]) {
    users[userId] = {
      tag: userName,
    };

    ctx.reply(
      `–¢—ã –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ —Ä–∞—Å—Å—ã–ª–∫–∏ –æ–∂–∏–¥–∞–Ω–∏—è —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ —Å–ª–æ—Ç–∞ ${reqiredDay} –≤ ${reqiredTime} üëå\n\n${iceRincSite}`,
    );

    bot.telegram.sendMessage(ownerID, `–ü–æ–¥–ø–∏—Å–∞–ª—Å—è: ${userName}, ${userId}`);
  } else {
    ctx.reply(
      `–¢—ã —É–∂–µ –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ —Ä–∞—Å—Å—ã–ª–∫–∏ —Ä–∞–Ω–µ–µ. –°–∏–¥–∏ –∏ –∂–¥–∏ —á—É–¥–∞, –º–∞–ª—ã—à ‚ú®`,
    );
  }

  if (userId == ownerID) {
    ctx.reply(
      `–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Å ${startBotDate} ${startBotTime}, –¥–Ω–µ–π —Ä–∞–±–æ—Ç—ã: ${getWorkDaysCount(date)}.`,
    );
  }
});

bot.command('stop', (ctx) => {
  const userId = ctx.message.from.id;
  const userName = `@${ctx.message.from.username}`;

  if (users[userId]) {
    delete users[userId];

    ctx.reply(`–¢—ã —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏.`);
    bot.telegram.sendMessage(ownerID, `–û—Ç–ø–∏—Å–∞–ª—Å—è: ${userName}, ${userId}`);
  } else {
    ctx.reply(`–¢–µ–±—è —É–∂–µ/–µ—â–µ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏.`);
  }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–ª–æ—Ç–æ–≤
const waitAvailableSlot = async () => {
  const browser = await puppeteer.launch({
    // executablePath: '/snap/bin/chromium',
    headless: true,
    args: [
      '--no-sandbox',
      '--disable-setuid-sandbox',
      '--disable-dev-shm-usage',
      '--disable-accelerated-2d-canvas',
      '--disable-gpu',
      '--no-zygote',
      '--single-process',
    ],
  });

  const pages = await browser.pages();
  const page = pages[0];
  // await page.setViewport({ width: 1920, height: 1080 });
  await page.goto(iceRincSite, { waitUntil: 'domcontentloaded' });

  console.log(
    `–ó–∞–ø—É—Å—Ç–∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–ª–æ—Ç–æ–≤ –≤ ${startBotDate} ${startBotTime}...`,
  );

  setInterval(async () => {
    try {
      // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å —Ç–∞–π–º-–∞—É—Ç–æ–º 30 —Å–µ–∫—É–Ω–¥
      await page.reload({ waitUntil: 'domcontentloaded', timeout: 30000 });

      // –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
      const isDayFound = await page.evaluate((reqiredDay) => {
        const calendar = document.querySelector('.swiper-calendar');
        if (!calendar) return false;

        const days = Array.from(calendar.querySelectorAll('.swiper-slide'));

        for (const day of days) {
          const dateElement = day.querySelector(
            '.registration-block__subtitle',
          );
          if (dateElement && dateElement.textContent === reqiredDay) {
            const slots = Array.from(
              day.querySelectorAll('.registration-block__time'),
            );
            if (slots[slots.length - 3].textContent !== '–ú–µ—Å—Ç –Ω–µ—Ç') {
              return true;
            }
          }
        }
        return false;
      }, reqiredDay);

      if (isDayFound) {
        const usersArr = Object.keys(users); // –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        for (const userId of usersArr) {
          try {
            await bot.telegram.sendMessage(
              userId,
              `–ó–∞–ø–∏—Å—å –Ω–∞ ${reqiredDay} –≤ ${reqiredTime} –ø–æ—è–≤–∏–ª–∞—Å—å! üéâ\n\n
–ü–æ—Å–ø–µ—à–∏, —ç—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—É—á–∏–ª–∏ –µ—â–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–µ–ª–æ–≤–µ–∫, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ö–æ—Ç–Ω–∏–∫–æ–≤ –∑–∞ —Å–ª–æ—Ç–∞–º–∏: ${usersArr.length}\n\n
–¢—ã —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏. –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–ª–æ—Ç–∞ —Å–Ω–æ–≤–∞ –Ω–∞–∂–º–∏ /start`,
            );

            delete users[userId];
          } catch (error) {
            console.error(
              `–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}:`,
              error.message,
            );
          }
        }
        // clearInterval(intervalId); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª, –µ—Å–ª–∏ —Å–ª–æ—Ç –Ω–∞–π–¥–µ–Ω
      }
    } catch (error) {
      console.error(
        '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏:',
        error.message,
      );
      bot.telegram.sendMessage(
        ownerID,
        `–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏: ${error.message}`,
      );
    }
  }, 30000);
};

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å–ª–æ—Ç–æ–≤
waitAvailableSlot();

bot.launch();
