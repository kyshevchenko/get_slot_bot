import puppeteer from 'puppeteer';
import { iceRincSiteURL, IceTimeSlots } from './sites/constants.js';

const reqiredDay = '25.12.2024';
const requiredTime = '12:00';

const slotNumber = IceTimeSlots[requiredTime];

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–ª–æ—Ç–æ–≤ –Ω–∞ –∫–∞—Ç–∫–µ
const checkIceRincSlot = async (users, bot, ownerID) => {
  const browser = await puppeteer.launch({
    // executablePath: '/snap/bin/chromium',
    headless: true,
    args: [
      '--no-sandbox',
      '--disable-setuid-sandbox',
      '--disable-dev-shm-usage',
      '--disable-accelerated-2d-canvas',
      '--disable-gpu',
      '--no-zygote',
      '--single-process',
    ],
  });

  const pages = await browser.pages();
  const page = pages[0];
  // await page.setViewport({ width: 1920, height: 1080 });
  await page.goto(iceRincSiteURL, { waitUntil: 'domcontentloaded' });

  setInterval(async () => {
    try {
      // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å —Ç–∞–π–º-–∞—É—Ç–æ–º 30 —Å–µ–∫—É–Ω–¥
      await page.reload({ waitUntil: 'domcontentloaded', timeout: 30000 });

      // –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
      const isDayFound = await page.evaluate(
        (reqiredDay, slotNumber) => {
          const calendar = document.querySelector('.swiper-calendar');
          if (!calendar) return false;

          const days = Array.from(calendar.querySelectorAll('.swiper-slide'));

          for (const day of days) {
            const dateElement = day.querySelector(
              '.registration-block__subtitle',
            );
            if (dateElement && dateElement.textContent === reqiredDay) {
              const slots = Array.from(
                day.querySelectorAll('.registration-block__time'),
              );
              if (slots[slotNumber].textContent !== '–ú–µ—Å—Ç –Ω–µ—Ç') {
                // —Ç—É—Ç
                return true;
              }
            }
          }
          return false;
        },
        reqiredDay,
        slotNumber,
      );

      if (isDayFound) {
        const usersArr = Object.keys(users); // –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        for (const userId of usersArr) {
          try {
            await bot.telegram.sendMessage(
              userId,
              `–ó–∞–ø–∏—Å—å –Ω–∞ ${reqiredDay} –≤ ${requiredTime} –ø–æ—è–≤–∏–ª–∞—Å—å! üéâ\n\n
–ü–æ—Å–ø–µ—à–∏, —ç—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—É—á–∏–ª–∏ –µ—â–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–µ–ª–æ–≤–µ–∫, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ö–æ—Ç–Ω–∏–∫–æ–≤ –∑–∞ —Å–ª–æ—Ç–∞–º–∏: ${usersArr.length}\n\n
–¢—ã —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏. –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–ª–æ—Ç–∞ —Å–Ω–æ–≤–∞ –Ω–∞–∂–º–∏ /start`,
            );

            delete users[userId];
          } catch (error) {
            console.error(
              `–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}:`,
              error.message,
            );
          }
        }
        // clearInterval(intervalId); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª, –µ—Å–ª–∏ —Å–ª–æ—Ç –Ω–∞–π–¥–µ–Ω
      }
    } catch (error) {
      console.error(
        '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏:',
        error.message,
      );
      bot.telegram.sendMessage(
        ownerID,
        `–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏: ${error.message}`,
      );
    }
  }, 10000);
};

export default checkIceRincSlot;
