import puppeteer from 'puppeteer';

export const monitorTickets = async (bot, ownerID, siteURL) => {
  console.log('üé´ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏...');

  const browser = await puppeteer.launch({
    headless: false,
    args: [
      '--no-sandbox',
      '--disable-setuid-sandbox',
      '--disable-dev-shm-usage',
      '--disable-gpu',
      '--window-size=1200,800',
    ],
  });

  try {
    const page = await browser.newPage();
    await page.setViewport({ width: 1200, height: 800 });

    while (true) {
      try {
        const randomDelay = Math.random() * 8000 + 2000;
        console.log(
          `‚è∞ –°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑: ${(randomDelay / 1000).toFixed(2)} —Å–µ–∫`,
        );
        await new Promise((resolve) => setTimeout(resolve, randomDelay));

        console.log('üåê –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É...');
        await page.goto(siteURL, {
          waitUntil: 'load',
          timeout: 30000,
        });

        // –∂–¥–µ–º —Å–µ–∫—É–Ω–¥—É –æ—Ç–≤–µ—Ç–∞ —Å –±—ç–∫–∞ –∏ –æ—Ç—Ä–∞–±–æ—Ç–∫–∏ —Å–∫—Ä–∏–ø—Ç–æ–≤
        await new Promise((resolve) => setTimeout(resolve, 1000));

        console.log('üîç –ò—â–µ–º —Ñ–æ—Ä–º—É —Å –∫–ª–∞—Å—Å–æ–º "activityDetail_filters..."');
        const buttonInfo = await page.evaluate(() => {
          // –ò—â–µ–º –ü–ï–†–í–£–Æ —Ñ–æ—Ä–º—É/–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –∫–ª–∞—Å—Å–æ–º, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–¥–µ—Ä–∂–∏—Ç "activityDetail_filters"
          const forms = Array.from(document.querySelectorAll('div')).filter(
            (element) => {
              const className = element.className || '';
              return (
                typeof className === 'string' &&
                className.includes('activityDetail_filters')
              );
            },
          );

          if (forms.length > 0) {
            const form = forms[0]; // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –Ω–∞–π–¥–µ–Ω–Ω—É—é —Ñ–æ—Ä–º—É

            // –ò—â–µ–º –∫–Ω–æ–ø–∫—É "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è" —Ç–æ–ª—å–∫–æ –≤–Ω—É—Ç—Ä–∏ —ç—Ç–æ–π —Ñ–æ—Ä–º—ã
            const buttons = form.querySelectorAll('button');

            for (const button of buttons) {
              const text = button.textContent?.trim() || '';
              if (text === '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è') {
                // –ü–æ–ª—É—á–∞–µ–º –í–´–ß–ò–°–õ–ï–ù–ù–´–ô —Ü–≤–µ—Ç –ø–æ—Å–ª–µ –≤—Å–µ—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤
                const computedColor =
                  window.getComputedStyle(button).backgroundColor;
                console.log(
                  'button computed backgroundColor === ',
                  computedColor,
                );

                const hasDisabledAttr = button.hasAttribute('disabled');
                console.log(
                  'button.hasAttribute("disabled") === ',
                  hasDisabledAttr,
                );
                console.log(' button.disabled === ', button.disabled);

                const isDisabled =
                  button.disabled ||
                  hasDisabledAttr ||
                  button.getAttribute('aria-disabled') === 'true' ||
                  button.classList.contains('disabled') ||
                  button.style.pointerEvents === 'none' ||
                  button.style.opacity === '0.5';

                return {
                  exists: true,
                  disabled: isDisabled,
                  text: text,
                  color: computedColor,
                  formFound: true,
                };
              }
            }
            console.log(
              '‚ùå –ö–Ω–æ–ø–∫–∞ "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤–Ω—É—Ç—Ä–∏ —Ñ–æ—Ä–º—ã',
            );
          } else {
            console.log('‚ùå –§–æ—Ä–º–∞ —Å activityDetail_filters –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
          }

          return { exists: false, disabled: true, text: '', formFound: false };
        });

        if (buttonInfo.exists) {
          console.log(
            `üîç –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞: "${buttonInfo.text}". üé® –¶–≤–µ—Ç: ${buttonInfo.color}. üìã –°–æ—Å—Ç–æ—è–Ω–∏–µ disabled: ${buttonInfo.disabled}`,
          );

          if (!buttonInfo.disabled) {
            console.log('üéâ –ö–Ω–æ–ø–∫–∞ –ê–ö–¢–ò–í–ù–ê! –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∞!');
            await notifyUsers(ownerID, bot, siteURL);

            try {
              // –ö–ª–∏–∫–∞–µ–º —á–µ—Ä–µ–∑ evaluate –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏
              await page.evaluate(() => {
                // –ò—â–µ–º –ø–µ—Ä–≤—É—é —Ñ–æ—Ä–º—É —Å activityDetail_filters
                const forms = Array.from(document.querySelectorAll('*')).filter(
                  (element) => {
                    const className = element.className || '';
                    return (
                      typeof className === 'string' &&
                      className.includes('activityDetail_filters')
                    );
                  },
                );

                if (forms.length > 0) {
                  const form = forms[0];
                  const buttons = form.querySelectorAll('button');
                  for (const button of buttons) {
                    if (
                      button.textContent?.trim() === '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è' &&
                      !button.disabled
                    ) {
                      button.click();
                      return;
                    }
                  }
                }
              });
              console.log('‚úÖ –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ –≤—ã–ø–æ–ª–Ω–µ–Ω');
            } catch (clickError) {
              console.log(
                '‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∫–ª–∏–∫–Ω—É—Ç—å –ø–æ –∫–Ω–æ–ø–∫–µ:',
                clickError.message,
              );
            }
          } else {
            console.log('‚è∏Ô∏è –ö–Ω–æ–ø–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥...');
          }
        } else {
          console.log(
            '‚ùå –ö–Ω–æ–ø–∫–∞ "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ü–µ–ª–µ–≤–æ–π —Ñ–æ—Ä–º–µ',
          );
        }

        console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É...');
      } catch (error) {
        if (error.name === 'TimeoutError') {
          console.log('‚è∞ –¢–∞–π–º–∞—É—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞...');
        } else {
          console.error('üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã:', error.message);
        }
      }
    }
  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
    await bot.telegram.sendMessage(
      ownerID,
      `‚ùå –û—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: ${error.message}`,
    );
  } finally {
    await browser.close();
  }
};

async function notifyUsers(ownerID, bot, siteURL) {
  console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ...');

  try {
    await bot.telegram.sendMessage(
      ownerID,
      `üéâ –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –û–¢–ö–†–´–¢–ê! üéâ\n\n–ö–Ω–æ–ø–∫–∞ "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è" —Å—Ç–∞–ª–∞ –∞–∫—Ç–∏–≤–Ω–æ–π!\n\n–°–∫–æ—Ä–µ–µ –ø–µ—Ä–µ—Ö–æ–¥–∏: ${siteURL}`,
    );

    console.log(`‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: ${ownerID}`);
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:`, error.message);
  }
}

export default monitorTickets;
