import puppeteer from 'puppeteer';

export const monitorTickets = async (bot, ownerID, siteURL) => {
  console.log('üé´ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏...');

  const browser = await puppeteer.launch({
    headless: false,
    args: [
      '--no-sandbox',
      '--disable-setuid-sandbox',
      '--disable-dev-shm-usage',
      '--disable-gpu',
      '--window-size=1200,800',
    ],
  });

  try {
    const page = await browser.newPage();
    await page.setViewport({ width: 1200, height: 800 });

    while (true) {
      try {
        const randomDelay = Math.random() * 8000 + 2000;
        console.log(
          `‚è∞ –°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑: ${(randomDelay / 1000).toFixed(2)} —Å–µ–∫`,
        );
        await new Promise((resolve) => setTimeout(resolve, randomDelay));

        console.log('üåê –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É...');
        await page.goto(siteURL, {
          waitUntil: 'load',
          timeout: 30000,
        });

        // –∂–¥–µ–º —Å–µ–∫—É–Ω–¥—É –æ—Ç–≤–µ—Ç–∞ —Å –±—ç–∫–∞ –∏ –æ—Ç—Ä–∞–±–æ—Ç–∫–∏ —Å–∫—Ä–∏–ø—Ç–æ–≤
        await new Promise((resolve) => setTimeout(resolve, 1000));

        console.log('üîç –ò—â–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ"');

        const timeInputText = await page.evaluate(() => {
          // –ò—â–µ–º –∏–Ω–ø—É—Ç —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —Å–ª–æ—Ç–∞–º–∏
          const elements = Array.from(document.querySelectorAll('*')).filter(
            (el) => {
              const className = el.className || '';
              return (
                typeof className === 'string' &&
                className.includes('filterButtonPopoverNota')
              );
            },
          );

          if (elements.length > 0) {
            return elements[0].textContent?.trim() || '';
          }

          return '';
        });

        if (timeInputText !== '–í—Ä–µ–º—è') {
          notifyUsers(ownerID, bot, siteURL, timeInputText);
        } else {
          console.log('–ü–æ–∫–∞ –Ω–µ –ø–æ—è–≤–∏–ª–∏—Å—å —Å–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã');
        }

        console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É...');
      } catch (error) {
        if (error.name === 'TimeoutError') {
          console.log('‚è∞ –¢–∞–π–º–∞—É—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞...');
        } else {
          console.error('üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã:', error.message);
        }
      }
    }
  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
    await bot.telegram.sendMessage(
      ownerID,
      `‚ùå –û—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: ${error.message}`,
    );
  } finally {
    await browser.close();
  }
};

async function notifyUsers(ownerID, bot, siteURL, timeInputText) {
  console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ...');

  try {
    await bot.telegram.sendMessage(
      ownerID,
      `${timeInputText}\n\nüéâ –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –û–¢–ö–†–´–¢–ê! üéâ\n\n–°–∫–æ—Ä–µ–µ –ø–µ—Ä–µ—Ö–æ–¥–∏: ${siteURL}`,
    );

    console.log(`‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: ${ownerID}`);
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:`, error.message);
  }
}

export default monitorTickets;
