import puppeteer from 'puppeteer';

export const monitorTickets = async (bot, ownerID, siteURL) => {
  console.log('üé´ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏...');

  const browser = await puppeteer.launch({
    headless: "new",
    args: [
      '--no-sandbox',
      '--disable-setuid-sandbox',
      '--disable-dev-shm-usage',
      '--disable-gpu',
      '--window-size=1200,800',
    ],
  });

  try {
    const page = await browser.newPage();
    await page.setViewport({ width: 1200, height: 800 });

    while (true) {
      try {
        const randomDelay = Math.random() * 8000 + 2000;
        console.log(
          `‚è∞ –°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑: ${(randomDelay / 1000).toFixed(2)} —Å–µ–∫`,
        );
        await new Promise((resolve) => setTimeout(resolve, randomDelay));

        console.log('üåê –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É...');
        await page.goto(siteURL, {
          waitUntil: 'load',
          timeout: 30000,
        });

        // –∂–¥–µ–º —Å–µ–∫—É–Ω–¥—É –æ—Ç–≤–µ—Ç–∞ —Å –±—ç–∫–∞ –∏ –æ—Ç—Ä–∞–±–æ—Ç–∫–∏ —Å–∫—Ä–∏–ø—Ç–æ–≤
        await new Promise((resolve) => setTimeout(resolve, 1000));

        console.log('üîç –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç —Å filterButtonPopoverNota...');

        const popoverContent = await page.evaluate(async () => {
          // –ò—â–µ–º –û–î–ò–ù —ç–ª–µ–º–µ–Ω—Ç —Å filterButtonPopoverNota
          const filterButton = Array.from(document.querySelectorAll('*')).find(
            (el) => {
              const className = el.className || '';
              return (
                typeof className === 'string' &&
                className.includes('filterButtonPopoverNota')
              );
            },
          );

          if (filterButton) {
            // –ö–ª–∏–∫–∞–µ–º –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç
            filterButton.click();

            // –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –º–æ–¥–∞–ª–∫–∏ (–¥–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∞–Ω–∏–º–∞—Ü–∏—é)
            await new Promise((resolve) => setTimeout(resolve, 500));

            // –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç —Å filterSelectedTime
            const popoverElements = Array.from(
              document.querySelectorAll('*'),
            ).filter((el) => {
              const className = el.className || '';
              return (
                typeof className === 'string' &&
                className.includes('FilterSelectTime_item')
              );
            });

            if (popoverElements.length > 0) {
              // return popoverElement.textContent?.trim() || '';
              const combinedText = popoverElements
                .map((el) => el.textContent?.trim() || '')
                .filter((text) => text !== '')
                .join('\n');

              return combinedText;
            }
          }

          return '';
        });

        if (popoverContent) {
          console.log('üìã –¢–µ–∫—Å—Ç –∏–∑ popoverContent:', popoverContent);
          await notifyUsers(ownerID, bot, siteURL, popoverContent);
        } else {
          console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–ª–∏ –æ—Ç–∫—Ä—ã—Ç—å popover');
        }

        console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É...');
      } catch (error) {
        if (error.name === 'TimeoutError') {
          console.log('‚è∞ –¢–∞–π–º–∞—É—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞...');
        } else {
          console.error('üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã:', error.message);
        }
      }
    }
  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
    await bot.telegram.sendMessage(
      ownerID,
      `‚ùå –û—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: ${error.message}`,
    );
  } finally {
    await browser.close();
  }
};

async function notifyUsers(ownerID, bot, siteURL, popoverContent) {
  console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ...');

  try {
    await bot.telegram.sendMessage(
      ownerID,
      `${popoverContent}\n\nüéâ –ù–ê–ô–î–ï–ù–´ –°–õ–û–¢–´! üéâ\n\n–°–∫–æ—Ä–µ–µ –ø–µ—Ä–µ—Ö–æ–¥–∏: ${siteURL}`,
    );

    console.log(`‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: ${ownerID}`);
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:`, error.message);
  }
}

export default monitorTickets;
