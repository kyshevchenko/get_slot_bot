import puppeteer from "puppeteer";
import { Telegraf } from "telegraf";
import dotenv from "dotenv";

dotenv.config();
const bot = new Telegraf(process.env.BOT_TOKEN);

const users = {};
const iceRincLink = "https://katok.sport.moscow/#registration";
const reqiredDay = "01.12.2024";
const reqiredTime = "20:30";

bot.start((ctx) => {
  const userId = ctx.message.from.id;
  const userName = ctx.message.from.username;

  if (!users[userId]) {
    users[userId] = {
      tag: userName,
    };

    ctx.reply(
      `–¢—ã –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ —Ä–∞—Å—Å—ã–ª–∫–∏ –æ–∂–∏–¥–∞–Ω–∏—è —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ —Å–ª–æ—Ç–∞ ${reqiredDay} –≤ ${reqiredTime} üëå\n\n${iceRincLink}`
    );
  } else {
    ctx.reply(
      `–¢—ã —É–∂–µ –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ —Ä–∞—Å—Å—ã–ª–∫–∏ —Ä–∞–Ω–µ–µ. –°–∏–¥–∏ –∏ –∂–¥–∏ —á—É–¥–∞, –º–∞–ª—ã—à ‚ú®`
    );
  }

  if (userId == process.env.OWNER_ID) {
    const usersList = Object.values(users).map(e => `@${e.tag}`);
    ctx.reply(`–°–ø–∏—Å–æ–∫ –∂–¥—É–Ω–æ–≤: ${usersList}`);
  }
});

bot.command("stop", (ctx) => {
  const userId = ctx.message.from.id;
  if (users[userId]) {
    delete users[userId];

    ctx.reply(`–¢—ã —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏.`);
  } else {
    ctx.reply(`–¢–µ–±—è —É–∂–µ/–µ—â–µ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏.`);
  }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–ª–æ—Ç–æ–≤
const waitAvailableSlot = async () => {
  const browser = await puppeteer.launch({
    headless: true,
    args: [
      '--no-sandbox',
      '--disable-setuid-sandbox',
      '--disable-dev-shm-usage',
      '--disable-accelerated-2d-canvas',
      '--disable-gpu',
      '--no-zygote',
      '--single-process'
    ],
  });

  const pages = await browser.pages();
  const page = pages[0];
  // await page.setViewport({ width: 1920, height: 1080 });
  await page.goto(iceRincLink, { waitUntil: "domcontentloaded" });

  console.log("–ó–∞–ø—É—Å—Ç–∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–ª–æ—Ç–æ–≤...");

  const intervalId = setInterval(async () => {
    const isDayFound = await page.evaluate((reqiredDay) => {
      location.reload();

      const calendar = document.querySelector(".swiper-calendar");
      if (!calendar) return false;

      const days = Array.from(calendar.querySelectorAll(".swiper-slide"));

      for (const day of days) {
        const dateElement = day.querySelector(".registration-block__subtitle");
        if (dateElement && dateElement.textContent === reqiredDay) {
          const slots = Array.from(
            day.querySelectorAll(".registration-block__time")
          );
          if (slots[slots.length - 1].textContent !== "–ú–µ—Å—Ç –Ω–µ—Ç") {
            return true;
          }
        }
      }
      return false;
    }, reqiredDay);

    if (isDayFound) {
      // console.log("–°–ª–æ—Ç –Ω–∞–π–¥–µ–Ω!");

      const usersArr = Object.keys(users); // –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      for (const userId of usersArr) {
        try {
          await bot.telegram.sendMessage(
            userId,
            `–ó–∞–ø–∏—Å—å –Ω–∞ ${reqiredDay} –≤ ${reqiredTime} –ø–æ—è–≤–∏–ª–∞—Å—å!\n\n
–ü–æ—Å–ø–µ—à–∏, —ç—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—É—á–∏–ª–∏ –µ—â–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–µ–ª–æ–≤–µ–∫, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ö–æ—Ç–Ω–∏–∫–æ–≤ –∑–∞ —Å–ª–æ—Ç–∞–º–∏: ${usersArr.length}\n
${iceRincLink}`
          );
        } catch (error) {
          console.error(
            `–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}:`,
            error.message
          );
        }
      }

      // clearInterval(intervalId);
      // await browser.close();
    }
    // else {
    //   const fullDate = new Date();
    //   const date = fullDate.toLocaleDateString();
    //   const time = fullDate.toLocaleTimeString();
    //   console.log(date, time, "–î–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∏—Å–∫–∞—Ç—å...");
    // }
  }, 15000);
};

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å–ª–æ—Ç–æ–≤
waitAvailableSlot();

bot.launch();
